{"version":3,"file":"slicedImage.js","sourceRoot":"je-src/","sources":["instances/modules/slicedImage.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageModule } from \"./image\";\r\n\r\n/**\r\n * Warning: not tested\r\n */\r\nexport class SlicedImageModule extends ImageModule {\r\n    private imageSlices: [number, number, number, number][] | null = null;\r\n\r\n    constructor(url: string, public pad: number) {\r\n        super(url);\r\n        this.image.addEventListener('load', () => {\r\n            this.imageSlices = [\r\n                [0, 0],\r\n                [pad, 0],\r\n                [pad * 2, 0],\r\n                [0, pad],\r\n                [pad, pad],\r\n                [pad * 2, pad],\r\n                [0, pad * 2],\r\n                [pad, pad * 2],\r\n                [pad * 2, pad * 2]\r\n            ].map(([x, y]) => [x, y, pad, pad]);\r\n        })\r\n    }\r\n\r\n    draw() {\r\n        if (!this.image.src || !this.imageSlices)\r\n            return;\r\n\r\n        const { pad, imageSlices, image } = this;\r\n        const { ctx } = this.instance;\r\n\r\n        ctx.translate(-this.width / 2, -this.height / 2);\r\n\r\n        const size = 0.5;\r\n\r\n        let width = this.width + size,\r\n            height = this.height + size,\r\n            x = size,\r\n            y = size;\r\n\r\n        ctx.drawImage(image, ...imageSlices[0], x, y, pad, pad);\r\n        ctx.drawImage(image, ...imageSlices[2], width - pad - x, y, pad, pad)\r\n        ctx.drawImage(image, ...imageSlices[6], x, height - pad - y, pad, pad)\r\n        ctx.drawImage(image, ...imageSlices[8], width - pad - x, height - pad - y, pad, pad)\r\n\r\n        ctx.drawImage(image, ...imageSlices[1], pad, y, width - 2 * pad, pad)\r\n        ctx.drawImage(image, ...imageSlices[7], pad, height - pad - y, width - 2 * pad, pad)\r\n        ctx.drawImage(image, ...imageSlices[3], x, pad, pad, height - 2 * pad)\r\n        ctx.drawImage(image, ...imageSlices[5], width - pad - x, pad, pad, height - 2 * pad)\r\n\r\n        ctx.drawImage(image, ...imageSlices[4], pad, pad, width - 2 * pad, height - 2 * pad)\r\n    }\r\n}"]}