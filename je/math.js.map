{"version":3,"file":"math.js","sourceRoot":"je-src/","sources":["math.ts"],"names":[],"mappings":"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","sourcesContent":["import { getInstances } from \"./canvas.js\";\r\nimport { Collisions } from \"./collisions.js\";\r\n\r\nexport interface Copyable<T> {\r\n    copy(): T;\r\n}\r\n\r\nexport class Point implements Copyable<Point> {\r\n    constructor(public x = 0, public y = 0) {}\r\n\r\n    copy() {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    static from(vec: { x: number, y: number }) {\r\n        return new Point(vec.x, vec.y);\r\n    }\r\n}\r\n\r\nexport class Circle extends Point implements Copyable<Circle> {\r\n    constructor(x: number, y: number, public radius: number) {\r\n        super(x, y);\r\n    }\r\n\r\n    copy() {\r\n        return new Circle(this.x, this.y, this.radius);\r\n    }\r\n\r\n    collides(b: Circle) {\r\n        return Collisions.circleToCircle(this, b);\r\n    }\r\n}\r\n\r\nexport class Rect extends Point implements Copyable<Rect> {\r\n    constructor(public x: number, public y: number, public width: number, public height: number) {\r\n        super(x, y);\r\n    }\r\n\r\n    copy() {\r\n        return new Rect(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    get topLeft() {\r\n        return new Point(this.x - this.width / 2, this.y - this.height / 2);\r\n    }\r\n\r\n    get top() {\r\n        return new Point(this.x, this.y - this.height / 2);\r\n    }\r\n\r\n    get topRight() {\r\n        return new Point(this.x + this.width / 2, this.y - this.height / 2);\r\n    }\r\n\r\n    get left() {\r\n        return new Point(this.x - this.width / 2, this.y);\r\n    }\r\n\r\n    get center() {\r\n        return new Point(this.x + this.width / 2, this.y + this.height / 2);\r\n    }\r\n\r\n    get right() {\r\n        return new Point(this.x + this.width / 2, this.y);\r\n    }\r\n\r\n    get bottomLeft() {\r\n        return new Point(this.x - this.width / 2, this.y + this.height / 2);\r\n    }\r\n\r\n    get bottom() {\r\n        return new Point(this.x, this.y + this.height / 2);\r\n    }\r\n\r\n    get bottomRight() {\r\n        return new Point(this.x + this.width / 2, this.y + this.height / 2);\r\n    }\r\n\r\n    get minX() {\r\n        return this.x;\r\n    }\r\n\r\n    get maxX() {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    get minY() {\r\n        return this.y;\r\n    }\r\n\r\n    get maxY() {\r\n        return this.y + this.height;\r\n    }\r\n\r\n    collide(rect: Rect, xs: number, ys: number) {\r\n        return Collisions.checkCollision(this, rect, xs, ys);\r\n    }\r\n\r\n    collideWithType(type: FunctionConstructor, xs: number, ys: number) {\r\n        for (const instance of getInstances()) {\r\n            const rect = instance as any['rect'];\r\n            if (rect != null && rect != this && instance instanceof type) {\r\n                if (this.collide(rect, xs, ys))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    collideWithTypes(type: FunctionConstructor[], xs: number, ys: number) {\r\n        for (const instance of getInstances()) {\r\n            const rect = instance as any['rect'];\r\n            if (rect != null && rect != this && type.some(t => instance instanceof t)) {\r\n                if (this.collide(rect, xs, ys))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport type Radians = number;\r\nexport type Angle = number;\r\n\r\nexport const GameMath = {\r\n    // convert\r\n    toRadians: (angle: Angle): Radians => angle * Math.PI / 180,\r\n    toAngle: (radians: Radians): Angle => radians * 180 / Math.PI,\r\n\r\n    // a, b\r\n    distance: (a: Point, b: Point) => Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2),\r\n    angleBetween: (a: Point, b: Point) => Math.atan2(b.y - a.y, b.x - a.x),\r\n\r\n    // angle\r\n    towardsRadians: (radians: Radians) => new Point(Math.cos(radians), Math.sin(radians)),\r\n    towards: (angle: Angle) => GameMath.towardsRadians(GameMath.toRadians(angle)),\r\n\r\n    // other\r\n    random: (min: number, max: number) => Math.random() * (max - min) + min,\r\n    randomFloor: (min: number, max: number) => Math.floor(GameMath.random(min, max)),\r\n    randomElement: <T>(arr: T[]) => arr[GameMath.randomFloor(0, arr.length - 1)],\r\n    sign: (x: number) => x > 0 ? 1 : x < 0 ? -1 : 0,\r\n    lerp: (a: number, b: number, t: number) => a * (1 - t) + b * t,\r\n    clamp: (a: number, min: number, max: number) => Math.min(Math.max(a, min), max)\r\n} as const;"]}