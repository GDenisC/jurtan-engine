{"version":3,"file":"math.js","sourceRoot":"je-src/","sources":["math.ts"],"names":[],"mappings":"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","sourcesContent":["import { getInstances } from \"./canvas.js\";\nimport { Collisions } from \"./collisions.js\";\nimport { Game } from \"./game.js\";\nimport { ImageInstance } from \"./images.js\";\nimport { Instance } from \"./instance.js\";\n\nexport interface Copyable<T> {\n    copy(): T;\n}\n\nexport class Point implements Copyable<Point> {\n    constructor(public x = 0, public y = 0) {}\n\n    copy() {\n        return new Point(this.x, this.y);\n    }\n\n    static from(vec: { x: number, y: number }) {\n        return new Point(vec.x, vec.y);\n    }\n}\n\nexport class Circle extends Point implements Copyable<Circle> {\n    constructor(x: number, y: number, public radius: number) {\n        super(x, y);\n    }\n\n    copy() {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    collides(b: Circle) {\n        return Collisions.circleToCircle(this, b);\n    }\n}\n\nexport class Rect extends Point implements Copyable<Rect> {\n    constructor(public x: number, public y: number, public width: number, public height: number) {\n        super(x, y);\n    }\n\n    copy() {\n        return new Rect(this.x, this.y, this.width, this.height);\n    }\n\n    get topLeft() {\n        return new Point(this.x - this.width / 2, this.y - this.height / 2);\n    }\n\n    get top() {\n        return new Point(this.x, this.y - this.height / 2);\n    }\n\n    get topRight() {\n        return new Point(this.x + this.width / 2, this.y - this.height / 2);\n    }\n\n    get left() {\n        return new Point(this.x - this.width / 2, this.y);\n    }\n\n    get center() {\n        return new Point(this.x + this.width / 2, this.y + this.height / 2);\n    }\n\n    get right() {\n        return new Point(this.x + this.width / 2, this.y);\n    }\n\n    get bottomLeft() {\n        return new Point(this.x - this.width / 2, this.y + this.height / 2);\n    }\n\n    get bottom() {\n        return new Point(this.x, this.y + this.height / 2);\n    }\n\n    get bottomRight() {\n        return new Point(this.x + this.width / 2, this.y + this.height / 2);\n    }\n\n    collide(instance: Instance, rect: Rect, xs: number, ys: number, subPos = false) {\n        const collision = Collisions.checkCollision(this, rect, xs, ys, { subPos });\n        Game.other = instance;\n        return collision;\n    }\n\n    collideWithType(type: FunctionConstructor, xs: number, ys: number) {\n        for (const instance of getInstances()) {\n            const rect = instance as any['rect'];\n            if (rect != null && rect != this && instance instanceof type) {\n                if (this.collide(instance, rect, xs, ys, !(instance instanceof ImageInstance)))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    collideWithTypes(type: FunctionConstructor[], xs: number, ys: number) {\n        for (const instance of getInstances()) {\n            const rect = instance as any['rect'];\n            if (rect != null && rect != this && type.some(t => instance instanceof t)) {\n                if (this.collide(instance, rect, xs, ys, !(instance instanceof ImageInstance)))\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n\nexport type Radians = number;\nexport type Angle = number;\n\nexport const GameMath = {\n    // convert\n    toRadians: (angle: Angle): Radians => angle * Math.PI / 180,\n    toAngle: (radians: Radians): Angle => radians * 180 / Math.PI,\n\n    // a, b\n    distance: (a: Point, b: Point) => Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2),\n    angleBetween: (a: Point, b: Point) => Math.atan2(b.y - a.y, b.x - a.x),\n\n    // angle\n    towardsRadians: (radians: Radians) => new Point(Math.cos(radians), Math.sin(radians)),\n    towards: (angle: Angle) => GameMath.towardsRadians(GameMath.toRadians(angle)),\n\n    // other\n    random: (min: number, max: number) => Math.random() * (max - min) + min,\n    sign: (x: number) => x > 0 ? 1 : x < 0 ? -1 : 0,\n    lerp: (a: number, b: number, t: number) => a * (1 - t) + b * t\n} as const;"]}