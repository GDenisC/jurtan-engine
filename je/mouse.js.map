{"version":3,"file":"mouse.js","sourceRoot":"je-src/","sources":["mouse.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,iBAAiB,EAAE,MAAM,aAAa,CAAA;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAA;AAQjC,MAAM,KAAK,GAAc;IACrB,OAAO,EAAE,IAAI,GAAG,EAAE;IAClB,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;CACP,CAAA;AAED,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE;IAC9B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAA;AAEF,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;IAC5B,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACnC,CAAC,CAAC,CAAA;AAEF,IAAI,MAAM,GAAkB,IAAI,CAAC;AAEjC,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE;IAC9B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;IACpB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;AACxB,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG;IACjB,SAAS,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;IAExD,WAAW,EAAE,GAAG,EAAE;QACd,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,iBAAiB,EAAE,CAAC;SAChC;QACD,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC;QAChD,MAAM,KAAK,GAAG;YACV,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;YACzB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;SAC9B,CAAA;QACD,OAAO,IAAI,KAAK,CACZ,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAC9B,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAI,KAAK,CAAC,CAAC,CAAC,CACjC,CAAA;IACL,CAAC;CACK,CAAC","sourcesContent":["import { Canvas, getCanvasInstance } from \"./canvas.js\"\nimport { Point } from \"./math.js\"\n\ntype MouseType = {\n    buttons: Set<number>,\n    x: number,\n    y: number\n}\n\nconst mouse: MouseType = {\n    buttons: new Set(),\n    x: 0,\n    y: 0\n}\n\naddEventListener('mousedown', e => {\n    mouse.buttons.add(e.button);\n})\n\naddEventListener('mouseup', e => {\n    mouse.buttons.delete(e.button);\n})\n\nlet memory: Canvas | null = null;\n\naddEventListener('mousemove', e => {\n    mouse.x = e.clientX;\n    mouse.y = e.clientY;\n})\n\nexport const Mouse = {\n    isPressed: (button: number) => mouse.buttons.has(button),\n\n    getPosition: () => {\n        if (!memory) {\n            memory = getCanvasInstance();\n        }\n        const rect = memory.tag.getBoundingClientRect();\n        const ratio = [\n            memory.width / rect.width,\n            memory.height / rect.height\n        ]\n        return new Point(\n            mouse.x - rect.left * ratio[0],\n            mouse.y - rect.top  * ratio[1]\n        )\n    }\n} as const;"]}