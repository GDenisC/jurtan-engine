import { getCanvasInstance } from "./canvas.js";
export const Collisions = {
    pointToPoint: (a, b) => a.x == b.x && a.y == b.y,
    pointToRect: (a, b, addSize = false, debug = false) => {
        if (addSize) {
            b.x += b.width;
            b.y += b.height;
        }
        if (debug) {
            const { ctx } = getCanvasInstance();
            ctx.strokeStyle = 'rgb(255, 0, 0)';
            ctx.strokeRect(a.x, a.y, 10, 10);
            ctx.strokeStyle = 'rgb(0, 255, 0)';
            ctx.strokeRect(b.x, b.y, b.width, b.height);
        }
        return a.x <= b.x && b.x <= a.x + b.width && a.y <= b.y && b.y <= a.y + b.height;
    },
    checkCollision: (a, b, xs, ys, options) => {
        const { subPos, debug } = options;
        let { x: x2, y: y2 } = b;
        if (subPos) {
            x2 -= b.width / 2;
            y2 -= b.height / 2;
        }
        if (debug) {
            const { ctx } = getCanvasInstance();
            ctx.strokeStyle = 'rgb(0, 0, 255)';
            ctx.strokeRect(a.x, a.y, a.width, a.height);
            ctx.strokeStyle = 'rgb(255, 0, 0)';
            ctx.strokeRect(x2, y2, b.width, b.height);
        }
        let { x, y } = a;
        x += xs;
        y += ys;
        if (debug) {
            const { ctx } = getCanvasInstance();
            ctx.strokeStyle = 'rgb(0, 255, 0)';
            ctx.strokeRect(x, y, a.width, a.height);
        }
        return (x + a.width >= x2 &&
            x <= x2 + b.width &&
            y + a.height >= y2 &&
            y <= y2 + b.height);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGlzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiJqZS1zcmMvIiwic291cmNlcyI6WyJjb2xsaXNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUdoRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDdEIsWUFBWSxFQUFFLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsV0FBVyxFQUFFLENBQUMsQ0FBUSxFQUFFLENBQU8sRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsRUFBRTtRQUMvRCxJQUFJLE9BQU8sRUFBRTtZQUNULENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNuQjtRQUNELElBQUksS0FBSyxFQUFFO1lBQ1AsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLGlCQUFpQixFQUFFLENBQUM7WUFDcEMsR0FBRyxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztZQUNuQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsR0FBRyxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztZQUNuQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQztRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNyRixDQUFDO0lBQ0QsY0FBYyxFQUFFLENBQUMsQ0FBTyxFQUFFLENBQU8sRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLE9BQThDLEVBQUUsRUFBRTtRQUN6RyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksTUFBTSxFQUFFO1lBQ1IsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUN0QjtRQUNELElBQUksS0FBSyxFQUFFO1lBQ1AsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLGlCQUFpQixFQUFFLENBQUM7WUFDcEMsR0FBRyxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztZQUNuQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QyxHQUFHLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO1lBQ25DLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDUixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1IsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztZQUNwQyxHQUFHLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO1lBQ25DLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQztRQUNELE9BQU8sQ0FDSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSyxFQUFFO1lBQ2xCLENBQUMsSUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUs7WUFDNUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRTtZQUNsQixDQUFDLElBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ2hDLENBQUM7SUFDTixDQUFDO0NBQ0ssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENhbnZhc0luc3RhbmNlIH0gZnJvbSBcIi4vY2FudmFzLmpzXCI7XG5pbXBvcnQgeyBQb2ludCwgUmVjdCB9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGNvbnN0IENvbGxpc2lvbnMgPSB7XG4gICAgcG9pbnRUb1BvaW50OiAoYTogUG9pbnQsIGI6IFBvaW50KSA9PiBhLnggPT0gYi54ICYmIGEueSA9PSBiLnksXG4gICAgcG9pbnRUb1JlY3Q6IChhOiBQb2ludCwgYjogUmVjdCwgYWRkU2l6ZSA9IGZhbHNlLCBkZWJ1ZyA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGlmIChhZGRTaXplKSB7XG4gICAgICAgICAgICBiLnggKz0gYi53aWR0aDtcbiAgICAgICAgICAgIGIueSArPSBiLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3R4IH0gPSBnZXRDYW52YXNJbnN0YW5jZSgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYigyNTUsIDAsIDApJztcbiAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KGEueCwgYS55LCAxMCwgMTApO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYigwLCAyNTUsIDApJztcbiAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KGIueCwgYi55LCBiLndpZHRoLCBiLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEueCA8PSBiLnggJiYgYi54IDw9IGEueCArIGIud2lkdGggJiYgYS55IDw9IGIueSAmJiBiLnkgPD0gYS55ICsgYi5oZWlnaHQ7XG4gICAgfSxcbiAgICBjaGVja0NvbGxpc2lvbjogKGE6IFJlY3QsIGI6IFJlY3QsIHhzOiBudW1iZXIsIHlzOiBudW1iZXIsIG9wdGlvbnM6IHsgc3ViUG9zPzogYm9vbGVhbiwgZGVidWc/OiBib29sZWFuIH0pID0+IHtcbiAgICAgICAgY29uc3QgeyBzdWJQb3MsIGRlYnVnIH0gPSBvcHRpb25zO1xuICAgICAgICBsZXQgeyB4OiB4MiwgeTogeTIgfSA9IGI7XG4gICAgICAgIGlmIChzdWJQb3MpIHtcbiAgICAgICAgICAgIHgyIC09IGIud2lkdGggLyAyO1xuICAgICAgICAgICAgeTIgLT0gYi5oZWlnaHQgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgY29uc3QgeyBjdHggfSA9IGdldENhbnZhc0luc3RhbmNlKCk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiKDAsIDAsIDI1NSknO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoYS54LCBhLnksIGEud2lkdGgsIGEuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2IoMjU1LCAwLCAwKSc7XG4gICAgICAgICAgICBjdHguc3Ryb2tlUmVjdCh4MiwgeTIsIGIud2lkdGgsIGIuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeyB4LCB5IH0gPSBhO1xuICAgICAgICB4ICs9IHhzO1xuICAgICAgICB5ICs9IHlzO1xuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3R4IH0gPSBnZXRDYW52YXNJbnN0YW5jZSgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYigwLCAyNTUsIDApJztcbiAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KHgsIHksIGEud2lkdGgsIGEuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgeCArIGEud2lkdGggID49IHgyICAgICAgICAgICAmJlxuICAgICAgICAgICAgeCAgICAgICAgICAgIDw9IHgyICsgYi53aWR0aCAmJlxuICAgICAgICAgICAgeSArIGEuaGVpZ2h0ID49IHkyICAgICAgICAgICAmJlxuICAgICAgICAgICAgeSAgICAgICAgICAgIDw9IHkyICsgYi5oZWlnaHRcbiAgICAgICAgKTtcbiAgICB9XG59IGFzIGNvbnN0OyJdfQ==