import { getInstances } from "./canvas.js";
import { Collisions } from "./collisions.js";
import { Game } from "./game.js";
import { ImageInstance } from "./images.js";
export class Point {
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
}
export class Rect extends Point {
    constructor(x, y, width, height) {
        super(x, y);
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    get topLeft() {
        return new Point(this.x - this.width / 2, this.y - this.height / 2);
    }
    get top() {
        return new Point(this.x, this.y - this.height / 2);
    }
    get topRight() {
        return new Point(this.x + this.width / 2, this.y - this.height / 2);
    }
    get left() {
        return new Point(this.x - this.width / 2, this.y);
    }
    get center() {
        return new Point(this.x + this.width / 2, this.y + this.height / 2);
    }
    get right() {
        return new Point(this.x + this.width / 2, this.y);
    }
    get bottomLeft() {
        return new Point(this.x - this.width / 2, this.y + this.height / 2);
    }
    get bottom() {
        return new Point(this.x, this.y + this.height / 2);
    }
    get bottomRight() {
        return new Point(this.x + this.width / 2, this.y + this.height / 2);
    }
    collide(instance, rect, xs, ys, subPos = false) {
        const collision = Collisions.checkCollision(this, rect, xs, ys, { subPos });
        Game.other = instance;
        return collision;
    }
    collideWithType(type, xs, ys) {
        for (const instance of getInstances()) {
            const rect = instance;
            if (rect != null && rect != this && instance instanceof type) {
                if (this.collide(instance, rect, xs, ys, !(instance instanceof ImageInstance)))
                    return true;
            }
        }
        return false;
    }
    collideWithTypes(type, xs, ys) {
        for (const instance of getInstances()) {
            const rect = instance;
            if (rect != null && rect != this && type.some(t => instance instanceof t)) {
                if (this.collide(instance, rect, xs, ys, !(instance instanceof ImageInstance)))
                    return true;
            }
        }
        return false;
    }
}
export const GameMath = {
    // convert
    toRadians: (angle) => angle * Math.PI / 180,
    toAngle: (radians) => radians * 180 / Math.PI,
    // a, b
    distance: (a, b) => Math.sqrt(Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2)),
    angleBetween: (a, b) => Math.atan2(b.y - a.y, b.x - a.x),
    // angle
    towardsRadians: (radians) => new Point(Math.cos(radians), Math.sin(radians)),
    towards: (angle) => GameMath.towardsRadians(GameMath.toRadians(angle)),
    // other
    random: (min, max) => Math.random() * (max - min) + min,
    sign: (x) => x > 0 ? 1 : x < 0 ? -1 : 0,
    lerp: (a, b, t) => a * (1 - t) + b * t
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5qcyIsInNvdXJjZVJvb3QiOiJqZS1zcmMvIiwic291cmNlcyI6WyJtYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUc1QyxNQUFNLE9BQU8sS0FBSztJQUNkLFlBQW1CLElBQUksQ0FBQyxFQUFTLElBQUksQ0FBQztRQUFuQixNQUFDLEdBQUQsQ0FBQyxDQUFJO1FBQVMsTUFBQyxHQUFELENBQUMsQ0FBSTtJQUFHLENBQUM7Q0FDN0M7QUFFRCxNQUFNLE9BQU8sSUFBSyxTQUFRLEtBQUs7SUFDM0IsWUFBbUIsQ0FBUyxFQUFTLENBQVMsRUFBUyxLQUFhLEVBQVMsTUFBYztRQUN2RixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBREcsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUFTLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUUzRixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0gsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxH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QUFDLENBQUM7SUFDcEYsT0FBTyxFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFOUUsUUFBUTtJQUNSLE1BQU0sRUFBRSxDQUFDLEdBQVcsRUFBRSxHQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHO0lBQ3ZFLElBQUksRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxJQUFJLEVBQUUsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0NBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRJbnN0YW5jZXMgfSBmcm9tIFwiLi9jYW52YXMuanNcIjtcbmltcG9ydCB7IENvbGxpc2lvbnMgfSBmcm9tIFwiLi9jb2xsaXNpb25zLmpzXCI7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vZ2FtZS5qc1wiO1xuaW1wb3J0IHsgSW1hZ2VJbnN0YW5jZSB9IGZyb20gXCIuL2ltYWdlcy5qc1wiO1xuaW1wb3J0IHsgSW5zdGFuY2UgfSBmcm9tIFwiLi9pbnN0YW5jZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4ID0gMCwgcHVibGljIHkgPSAwKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmVjdCBleHRlbmRzIFBvaW50IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyLCBwdWJsaWMgeTogbnVtYmVyLCBwdWJsaWMgd2lkdGg6IG51bWJlciwgcHVibGljIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHgsIHkpO1xuICAgIH1cblxuICAgIGdldCB0b3BMZWZ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHRoaXMud2lkdGggLyAyLCB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIpO1xuICAgIH1cblxuICAgIGdldCB0b3AoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIpO1xuICAgIH1cblxuICAgIGdldCB0b3BSaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyB0aGlzLndpZHRoIC8gMiwgdGhpcy55IC0gdGhpcy5oZWlnaHQgLyAyKTtcbiAgICB9XG5cbiAgICBnZXQgbGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSB0aGlzLndpZHRoIC8gMiwgdGhpcy55KTtcbiAgICB9XG5cbiAgICBnZXQgY2VudGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHRoaXMud2lkdGggLyAyLCB0aGlzLnkgKyB0aGlzLmhlaWdodCAvIDIpO1xuICAgIH1cblxuICAgIGdldCByaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyB0aGlzLndpZHRoIC8gMiwgdGhpcy55KTtcbiAgICB9XG5cbiAgICBnZXQgYm90dG9tTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSB0aGlzLndpZHRoIC8gMiwgdGhpcy55ICsgdGhpcy5oZWlnaHQgLyAyKTtcbiAgICB9XG5cbiAgICBnZXQgYm90dG9tKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55ICsgdGhpcy5oZWlnaHQgLyAyKTtcbiAgICB9XG5cbiAgICBnZXQgYm90dG9tUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICsgdGhpcy53aWR0aCAvIDIsIHRoaXMueSArIHRoaXMuaGVpZ2h0IC8gMik7XG4gICAgfVxuXG4gICAgY29sbGlkZShpbnN0YW5jZTogSW5zdGFuY2UsIHJlY3Q6IFJlY3QsIHhzOiBudW1iZXIsIHlzOiBudW1iZXIsIHN1YlBvcyA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbiA9IENvbGxpc2lvbnMuY2hlY2tDb2xsaXNpb24odGhpcywgcmVjdCwgeHMsIHlzLCB7IHN1YlBvcyB9KTtcbiAgICAgICAgR2FtZS5vdGhlciA9IGluc3RhbmNlO1xuICAgICAgICByZXR1cm4gY29sbGlzaW9uO1xuICAgIH1cblxuICAgIGNvbGxpZGVXaXRoVHlwZSh0eXBlOiBGdW5jdGlvbkNvbnN0cnVjdG9yLCB4czogbnVtYmVyLCB5czogbnVtYmVyKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgZ2V0SW5zdGFuY2VzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBpbnN0YW5jZSBhcyBhbnlbJ3JlY3QnXTtcbiAgICAgICAgICAgIGlmIChyZWN0ICE9IG51bGwgJiYgcmVjdCAhPSB0aGlzICYmIGluc3RhbmNlIGluc3RhbmNlb2YgdHlwZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbGxpZGUoaW5zdGFuY2UsIHJlY3QsIHhzLCB5cywgIShpbnN0YW5jZSBpbnN0YW5jZW9mIEltYWdlSW5zdGFuY2UpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbGxpZGVXaXRoVHlwZXModHlwZTogRnVuY3Rpb25Db25zdHJ1Y3RvcltdLCB4czogbnVtYmVyLCB5czogbnVtYmVyKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgZ2V0SW5zdGFuY2VzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBpbnN0YW5jZSBhcyBhbnlbJ3JlY3QnXTtcbiAgICAgICAgICAgIGlmIChyZWN0ICE9IG51bGwgJiYgcmVjdCAhPSB0aGlzICYmIHR5cGUuc29tZSh0ID0+IGluc3RhbmNlIGluc3RhbmNlb2YgdCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xsaWRlKGluc3RhbmNlLCByZWN0LCB4cywgeXMsICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBJbWFnZUluc3RhbmNlKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBHYW1lTWF0aCA9IHtcbiAgICAvLyBjb252ZXJ0XG4gICAgdG9SYWRpYW5zOiAoYW5nbGU6IG51bWJlcikgPT4gYW5nbGUgKiBNYXRoLlBJIC8gMTgwLFxuICAgIHRvQW5nbGU6IChyYWRpYW5zOiBudW1iZXIpID0+IHJhZGlhbnMgKiAxODAgLyBNYXRoLlBJLFxuXG4gICAgLy8gYSwgYlxuICAgIGRpc3RhbmNlOiAoYTogUG9pbnQsIGI6IFBvaW50KSA9PiBNYXRoLnNxcnQoKGEueCAtIGIueCkgKiogMiArIChhLnkgLSBiLnkpICoqIDIpLFxuICAgIGFuZ2xlQmV0d2VlbjogKGE6IFBvaW50LCBiOiBQb2ludCkgPT4gTWF0aC5hdGFuMihiLnkgLSBhLnksIGIueCAtIGEueCksXG5cbiAgICAvLyBhbmdsZVxuICAgIHRvd2FyZHNSYWRpYW5zOiAocmFkaWFuczogbnVtYmVyKSA9PiBuZXcgUG9pbnQoTWF0aC5jb3MocmFkaWFucyksIE1hdGguc2luKHJhZGlhbnMpKSxcbiAgICB0b3dhcmRzOiAoYW5nbGU6IG51bWJlcikgPT4gR2FtZU1hdGgudG93YXJkc1JhZGlhbnMoR2FtZU1hdGgudG9SYWRpYW5zKGFuZ2xlKSksXG5cbiAgICAvLyBvdGhlclxuICAgIHJhbmRvbTogKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikgPT4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluLFxuICAgIHNpZ246ICh4OiBudW1iZXIpID0+IHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwLFxuICAgIGxlcnA6IChhOiBudW1iZXIsIGI6IG51bWJlciwgdDogbnVtYmVyKSA9PiBhICogKDEgLSB0KSArIGIgKiB0XG59IGFzIGNvbnN0OyJdfQ==