{"version":3,"file":"colors.js","sourceRoot":"je-src/","sources":["colors.ts"],"names":[],"mappings":"AAYA,MAAM,CAAC,MAAM,KAAK,GAAG;IACjB,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAW;IACpC,KAAK,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAW;IAC1C,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAW;IACpC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAW;IACtC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAW;IACrC,MAAM,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAW;IACzC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAW;IACvC,OAAO,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAW;IAE1C;;OAEG;IACH,MAAM,EAAE,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU,EAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAChF;;OAEG;IACH,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG;IACvI;;OAEG;IACH,IAAI,EAAE,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9F,GAAG,EAAE,CAAC,CAAW,EAAE,CAAW,EAAE,IAAY,GAAG,EAAE,EAAE;QAC/C,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QAErB,OAAO,KAAK,CAAC,MAAM,CACf,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EACvB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EACvB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1B,CAAC;IACN,CAAC;IACD,KAAK,EAAE,CAAC,CAAW,EAAE,CAAS,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;CAC3D,CAAC","sourcesContent":["export type ColorRGB = {\n    r: number,\n    g: number,\n    b: number\n}\n\nexport type ColorRGBA = { a: number } & ColorRGB;\n\nexport type Color = ColorRGB & Partial<ColorRGBA>;\n\nexport type AnyColor = Color | string | [number, number, number] | [number, number, number, number];\n\nexport const Color = {\n    black: { r: 0, g: 0, b: 0 } as Color,\n    white: { r: 255, g: 255, b: 255 } as Color,\n    red: { r: 255, g: 0, b: 0 } as Color,\n    green: { r: 0, g: 255, b: 0 } as Color,\n    blue: { r: 0, g: 0, b: 255 } as Color,\n    yellow: { r: 255, g: 255, b: 0 } as Color,\n    cyan: { r: 0, g: 255, b: 255 } as Color,\n    magenta: { r: 255, g: 0, b: 255 } as Color,\n\n    /**\n     * Create `Color` from RGBA\n     */\n    create: (r: number, g: number, b: number, a?: number): Color => ({ r, g, b, a }),\n    /**\n     * Convert `Color` to canvas color\n     */\n    convert: (color: Color) => color.a ? `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})` : `rgb(${color.r}, ${color.g}, ${color.b})`,\n    /**\n     * Create canvas color from RGBA\n     */\n    from: (r: number, g: number, b: number, a?: number) => Color.convert(Color.create(r, g, b, a)),\n    mix: (a: ColorRGB, b: ColorRGB, t: number = 0.5) => {\n        if (t == 1) return a;\n        if (t == 0) return b;\n\n        return Color.create(\n            a.r * (1 - t) + b.r * t,\n            a.g * (1 - t) + b.g * t,\n            a.b * (1 - t) + b.b * t\n        );\n    },\n    alpha: (c: ColorRGB, a: number) => Color.create(c.r, c.g, c.b, a)\n} as const;"]}