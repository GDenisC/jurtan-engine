{"version":3,"file":"index.js","sourceRoot":"je-src/","sources":["server/index.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n// check is NodeJS\r\nconst isNode = typeof process !== 'undefined'\r\n\r\nif (!isNode) {\r\n    throw new Error('`WebServer` can only be used in NodeJS')\r\n}\r\n\r\nimport { existsSync, createReadStream, lstatSync } from 'fs';\r\nimport { createServer, Server } from 'http';\r\nimport { join } from 'path';\r\nimport { WebSocket, WebSocketServer } from 'ws';\r\nimport { EventEmitter } from '../eventEmitter.js';\r\n\r\nexport const mimeSet = {\r\n    \"js\": \"application/javascript\",\r\n    \"json\": \"application/json\",\r\n    \"css\": \"text/css\",\r\n    \"html\": \"text/html\",\r\n    \"md\": \"text/markdown\",\r\n    \"png\": \"image/png\",\r\n    \"ico\": \"image/x-icon\"\r\n} as any;\r\n\r\nexport class WebServer<T extends WebSocket = WebSocket, Message = Record<string | symbol, any>> extends EventEmitter {\r\n    http: Server;\r\n    wss: WebSocketServer;\r\n    sockets: T[] = [];\r\n\r\n    constructor(directory = './dist') {\r\n        super();\r\n        this.http = createServer((req, res) => {\r\n            let path = '';\r\n            if (!req.url) path = directory + '/index.html';\r\n            else path = '.\\\\' + join(directory, req.url);\r\n\r\n            if (!existsSync(path) || !lstatSync(path).isFile()) {\r\n                path = join(directory, 'index.html');\r\n            }\r\n\r\n            const ext = path.split('.').pop();\r\n            res.writeHead(200, { 'Content-Type': ext ? mimeSet[ext] || 'text/html' : 'text/html' });\r\n\r\n            return createReadStream(path).pipe(res);\r\n        });\r\n        this.wss = new WebSocketServer({ noServer: true });\r\n    }\r\n\r\n    listen(port: number) {\r\n        this.http.on('upgrade', (req, socket, head) => {\r\n            this.wss.handleUpgrade(req, socket, head, ws => {\r\n                this.sockets.push(ws as unknown as T);\r\n                ws.on('message', data => this.emit('message', JSON.parse(data.toString())));\r\n                this.emit('connection', ws);\r\n            });\r\n        });\r\n        this.http.listen(port, () => console.log(`Server listening on port ${port}`));\r\n    }\r\n\r\n    disconnect(socket: T) {\r\n        this.sockets.splice(this.sockets.indexOf(socket), 1);\r\n        if (socket.readyState == WebSocket.OPEN) {\r\n            socket.close();\r\n        }\r\n    }\r\n\r\n    on(event: 'message', listener: (data: Message) => any): void;\r\n    on(event: 'connection', listener: (socket: T) => any): void;\r\n    on(event: string, listener: (...args: any[]) => any) {\r\n        super.on(event, listener);\r\n    }\r\n}"]}