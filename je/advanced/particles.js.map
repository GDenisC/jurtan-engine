{"version":3,"file":"particles.js","sourceRoot":"je-src/","sources":["advanced/particles.ts"],"names":[],"mappings":"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","sourcesContent":["import { Color } from \"../colors\";\r\nimport { Instance } from \"../instances\";\r\n\r\ntype Vec2<T> = [T, T];\r\ntype Numbers = Vec2<number>;\r\ntype Range<T = number> = T | Vec2<T>;\r\n\r\nexport interface ParticleSpawnerConfig {\r\n    maxParticles: number;\r\n    spawnRate: number;\r\n    spawnTime: Range;\r\n    lifetime: Range;\r\n    speed: Range;\r\n    velocity: Range;\r\n    direction: Range;\r\n    gravity: Range<Numbers>;\r\n    scale: Range<Numbers>;\r\n    color: Color;\r\n    rotation: Range;\r\n    width: Range;\r\n    height: Range;\r\n    fadeInTime: Range;\r\n    fadeOutTime: Range;\r\n    size: Range;\r\n}\r\n\r\nexport class Particle extends Instance {\r\n    lifetime: number;\r\n    readonly realLifetime: number;\r\n    opacity = 0;\r\n\r\n    constructor(\r\n        public gravity: Numbers,\r\n        public speed: number,\r\n        public velocity: number,\r\n        public direction: number,\r\n        public color: Color,\r\n        public particleScale: Numbers,\r\n        public rotation: number,\r\n        public size: number,\r\n        public fadeInTime: number,\r\n        public fadeOutTime: number,\r\n        lifetime: number\r\n    ) {\r\n        super();\r\n        this.lifetime = Date.now() + lifetime;\r\n        this.realLifetime = lifetime;\r\n    }\r\n\r\n    onBeforeDraw() {\r\n        this.save();\r\n        this.alpha = this.opacity;\r\n        this.scale(this.particleScale[0], this.particleScale[1]);\r\n        this.rotateAngle(this.direction);\r\n        this.fillColor = this.color;\r\n    }\r\n\r\n    /**\r\n     * Override this method\r\n     */\r\n    onDraw() {\r\n        this.rectangle(0, 0, this.size, this.size);\r\n        this.fill();\r\n    }\r\n\r\n    onAfterDraw() {\r\n        this.restore();\r\n    }\r\n\r\n    onUpdate() {\r\n        this.direction += this.rotation;\r\n        this.speed += this.velocity;\r\n        this.x += Math.cos(this.direction) * this.speed;\r\n        this.y += Math.sin(this.direction) * this.speed;\r\n        let lifetime = this.lifetime - Date.now();\r\n        if (lifetime <= 0) {\r\n            lifetime = 0.001;\r\n        }\r\n        if (this.fadeInTime > 0) this.opacity = (this.realLifetime - lifetime) / this.fadeInTime;\r\n        else this.opacity = 1;\r\n        this.opacity *= lifetime / this.fadeOutTime;\r\n        this.x += this.gravity[0] * lifetime;\r\n        this.y += this.gravity[1] * lifetime;\r\n        if (lifetime <= 0.001) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Children of the `ParticleSpawner` class can be only `Particle`s\r\n */\r\nexport class ParticleSpawner extends Instance {\r\n    protected config: ParticleSpawnerConfig;\r\n    protected spawnTime: number;\r\n\r\n    constructor(config: Partial<ParticleSpawnerConfig>, protected classType: typeof Particle = Particle) {\r\n        super();\r\n        config.maxParticles ??= 100;\r\n        config.spawnRate ??= 1;\r\n        config.spawnTime ??= 100;\r\n        config.lifetime ??= 1000;\r\n        config.speed ??= 1;\r\n        config.velocity ??= 0;\r\n        config.direction ??= [0, 360];\r\n        config.gravity ??= [0, 0];\r\n        config.scale ??= [1, 1];\r\n        config.color ??= Color.white;\r\n        config.rotation ??= 0;\r\n        config.width ??= 0;\r\n        config.height ??= 0;\r\n        config.fadeInTime ??= 0;\r\n        config.fadeOutTime ??= 0;\r\n        config.size ??= 4;\r\n        this.config = config as ParticleSpawnerConfig;\r\n        this.spawnTime = 0;\r\n    }\r\n\r\n    onBegin() {\r\n        this.spawn();\r\n    }\r\n\r\n    private spawn() {\r\n        for (let i = 0; i < this.config.spawnRate; i++) {\r\n            this.spawnParticle();\r\n        }\r\n        setTimeout(() => this.spawn.apply(this), this.rand(this.config.spawnTime));\r\n    }\r\n\r\n    spawnParticle() {\r\n        if (this.config.maxParticles <= this.children.length) return;\r\n        const gravity = this.rand2(this.config.gravity);\r\n        const speed = this.rand(this.config.speed);\r\n        const velocity = this.rand(this.config.velocity);\r\n        const direction = this.rand(this.config.direction);\r\n        const color = this.config.color;\r\n        const particleScale = this.rand2(this.config.scale);\r\n        const rotation = this.rand(this.config.rotation);\r\n        const size = this.rand(this.config.size);\r\n        const fadeInTime = this.rand(this.config.fadeInTime);\r\n        const fadeOutTime = this.rand(this.config.fadeOutTime);\r\n        const lifetime = this.rand(this.config.lifetime);\r\n        const x = this.x + this.rand(this.config.width);\r\n        const y = this.y + this.rand(this.config.height);\r\n        const instance = new this.classType(gravity, speed, velocity, direction, color, particleScale, rotation, size, fadeInTime, fadeOutTime, lifetime);\r\n        instance.x = x;\r\n        instance.y = y;\r\n        this.add(instance);\r\n    }\r\n\r\n    rand(range: Range<number>): number {\r\n        return Array.isArray(range) ? Math.random() * (range[1] - range[0]) + range[0] : range;\r\n    }\r\n\r\n    rand2(range: Range<Numbers>): Numbers {\r\n        return Array.isArray(range) ? [this.rand(range[0]), this.rand(range[1])] : range;\r\n    }\r\n}"]}