{"version":3,"file":"animation.js","sourceRoot":"je-src/","sources":["advanced/animation.ts"],"names":[],"mappings":"AAAA,MAAM,OAAgB,SAAS;CAM9B;AAOD,MAAM,OAAO,eAAe;IACxB,IAAI,CAAC,CAAS;QACV,OAAO,CAAC,CAAC;IACb,CAAC;CACJ;AAED,MAAM,OAAO,aAAa;IACtB,IAAI,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;QAChC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,CAAC,CAAS;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;CACJ;AAED,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACvB,yDAAM,CAAA;IACN,qDAAI,CAAA;IACJ,2DAAO,CAAA;AACX,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED,MAAM,OAAO,QAAQ;IAMjB,YAAY,SAA+B,EAAS,OAAwB,EAAS,QAAgB;QAAjD,YAAO,GAAP,OAAO,CAAiB;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAL3F,cAAS,GAAY,KAAK,CAAC;QAGrC,aAAQ,GAAW,CAAC,CAAC;QAGjB,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;IACrC,CAAC;IAED,MAAM;QACF,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;YACxD,QAAQ,IAAI,CAAC,OAAO,EAAE;gBAClB,KAAK,eAAe,CAAC,MAAM;oBACvB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;oBAClB,MAAM;gBACV,KAAK,eAAe,CAAC,IAAI;oBACrB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;oBAClB,MAAM;gBACV,KAAK,eAAe,CAAC,OAAO;oBACxB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;oBACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM;aACb;SACJ;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["export abstract class Animation {\n    /**\n     * Returns the value of the animation\n     * @param x min 0, max 1\n     */\n    abstract getY(x: number): number;\n}\n\nexport interface AnimationConstructor {\n    new(): Animation;\n    getY(x: number): number;\n}\n\nexport class LinealAnimation {\n    getY(x: number) {\n        return x;\n    }\n}\n\nexport class LerpAnimation {\n    lerp(a: number, b: number, t: number) {\n        return a + (b - a) * t;\n    }\n\n    getY(x: number) {\n        return this.lerp(x, 1, x);\n    }\n}\n\nexport enum AnimatorEndType {\n    Repeat,\n    Stop,\n    Reverse\n}\n\nexport class Animator {\n    protected isReverse: boolean = false;\n\n    animation: Animation;\n    position: number = 0;\n\n    constructor(animation: AnimationConstructor, public endType: AnimatorEndType, public stepSize: number) {\n        this.animation = new animation();\n    }\n\n    update() {\n        if (this.isReverse ? this.position < 0 : this.position > 1) {\n            switch (this.endType) {\n                case AnimatorEndType.Repeat:\n                    this.position = 0;\n                    break;\n                case AnimatorEndType.Stop:\n                    this.position = 1;\n                    break;\n                case AnimatorEndType.Reverse:\n                    this.isReverse = !this.isReverse;\n                    this.position = this.isReverse ? 1 : 0;\n                    break;\n            }\n        }\n        const result = this.animation.getY(this.position);\n        this.position += this.stepSize * (this.isReverse ? -1 : 1);\n        return result;\n    }\n}"]}