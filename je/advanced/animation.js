export class Animation {
}
export class LinealAnimation {
    getY(x) {
        return x;
    }
}
export class LerpAnimation {
    lerp(a, b, t) {
        return a + (b - a) * t;
    }
    getY(x) {
        return this.lerp(x, 1, x);
    }
}
export var AnimatorEndType;
(function (AnimatorEndType) {
    AnimatorEndType[AnimatorEndType["Repeat"] = 0] = "Repeat";
    AnimatorEndType[AnimatorEndType["Stop"] = 1] = "Stop";
    AnimatorEndType[AnimatorEndType["Reverse"] = 2] = "Reverse";
})(AnimatorEndType || (AnimatorEndType = {}));
export class Animator {
    constructor(animation, endType, stepSize) {
        this.endType = endType;
        this.stepSize = stepSize;
        this.isReverse = false;
        this.position = 0;
        this.animation = new animation();
    }
    update() {
        if (this.isReverse ? this.position < 0 : this.position > 1) {
            switch (this.endType) {
                case AnimatorEndType.Repeat:
                    this.position = 0;
                    break;
                case AnimatorEndType.Stop:
                    this.position = 1;
                    break;
                case AnimatorEndType.Reverse:
                    this.isReverse = !this.isReverse;
                    this.position = this.isReverse ? 1 : 0;
                    break;
            }
        }
        const result = this.animation.getY(this.position);
        this.position += this.stepSize * (this.isReverse ? -1 : 1);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6ImplLXNyYy8iLCJzb3VyY2VzIjpbImFkdmFuY2VkL2FuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQWdCLFNBQVM7Q0FNOUI7QUFPRCxNQUFNLE9BQU8sZUFBZTtJQUN4QixJQUFJLENBQUMsQ0FBUztRQUNWLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLGFBQWE7SUFDdEIsSUFBSSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFTO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBRUQsTUFBTSxDQUFOLElBQVksZUFJWDtBQUpELFdBQVksZUFBZTtJQUN2Qix5REFBTSxDQUFBO0lBQ04scURBQUksQ0FBQTtJQUNKLDJEQUFPLENBQUE7QUFDWCxDQUFDLEVBSlcsZUFBZSxLQUFmLGVBQWUsUUFJMUI7QUFFRCxNQUFNLE9BQU8sUUFBUTtJQU1qQixZQUFZLFNBQStCLEVBQVMsT0FBd0IsRUFBUyxRQUFnQjtRQUFqRCxZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVE7UUFMM0YsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUdyQyxhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBR2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQ3hELFFBQVEsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDbEIsS0FBSyxlQUFlLENBQUMsTUFBTTtvQkFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7b0JBQ2xCLE1BQU07Z0JBQ1YsS0FBSyxlQUFlLENBQUMsSUFBSTtvQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7b0JBQ2xCLE1BQU07Z0JBQ1YsS0FBSyxlQUFlLENBQUMsT0FBTztvQkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZDLE1BQU07YUFDYjtTQUNKO1FBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQW5pbWF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgYW5pbWF0aW9uXG4gICAgICogQHBhcmFtIHggbWluIDAsIG1heCAxXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0WSh4OiBudW1iZXIpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uQ29uc3RydWN0b3Ige1xuICAgIG5ldygpOiBBbmltYXRpb247XG4gICAgZ2V0WSh4OiBudW1iZXIpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBMaW5lYWxBbmltYXRpb24ge1xuICAgIGdldFkoeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExlcnBBbmltYXRpb24ge1xuICAgIGxlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gYSArIChiIC0gYSkgKiB0O1xuICAgIH1cblxuICAgIGdldFkoeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlcnAoeCwgMSwgeCk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBBbmltYXRvckVuZFR5cGUge1xuICAgIFJlcGVhdCxcbiAgICBTdG9wLFxuICAgIFJldmVyc2Vcbn1cblxuZXhwb3J0IGNsYXNzIEFuaW1hdG9yIHtcbiAgICBwcm90ZWN0ZWQgaXNSZXZlcnNlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBhbmltYXRpb246IEFuaW1hdGlvbjtcbiAgICBwb3NpdGlvbjogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKGFuaW1hdGlvbjogQW5pbWF0aW9uQ29uc3RydWN0b3IsIHB1YmxpYyBlbmRUeXBlOiBBbmltYXRvckVuZFR5cGUsIHB1YmxpYyBzdGVwU2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IGFuaW1hdGlvbigpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlID8gdGhpcy5wb3NpdGlvbiA8IDAgOiB0aGlzLnBvc2l0aW9uID4gMSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmVuZFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEFuaW1hdG9yRW5kVHlwZS5SZXBlYXQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEFuaW1hdG9yRW5kVHlwZS5TdG9wOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBBbmltYXRvckVuZFR5cGUuUmV2ZXJzZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JldmVyc2UgPSAhdGhpcy5pc1JldmVyc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLmlzUmV2ZXJzZSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFuaW1hdGlvbi5nZXRZKHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IHRoaXMuc3RlcFNpemUgKiAodGhpcy5pc1JldmVyc2UgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn0iXX0=