{"version":3,"file":"requests.js","sourceRoot":"je-src/","sources":["advanced/requests.ts"],"names":[],"mappings":"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","sourcesContent":["let req = (window as any)['axios'];\r\n\r\nif (req == undefined) {\r\n    req = {};\r\n    for (const type of ['get', 'post', 'put', 'delete']) {\r\n        req[type] = async (url: string, options: any) => {\r\n            const res = await fetch(url, { method: type.toUpperCase(), ...options });\r\n            const { status, statusText, headers } = res;\r\n            let data = null;\r\n            try {\r\n                data = await res.json();\r\n            } catch {\r\n                data = await res.text();\r\n            }\r\n            return { data, status, statusText, headers };\r\n        };\r\n    }\r\n}\r\n\r\ntype Dictionary = Record<any, any>;\r\n\r\nexport type SessionParams = {\r\n    headers: Dictionary\r\n}\r\n\r\nexport type RequestParams = SessionParams & {\r\n    data: Dictionary\r\n}\r\n\r\nexport class Session {\r\n    public options: SessionParams;\r\n\r\n    constructor(public url: string, params: Partial<SessionParams> = {}) {\r\n        params.headers ??= {};\r\n        this.options = params as SessionParams;\r\n    }\r\n\r\n    protected async request(path: string, type: 'get' | 'post' | 'put' | 'delete', data?: Dictionary) {\r\n        try {\r\n            return await req[type].apply(\r\n                null,\r\n                [this.url + path, type != 'get' ? data : null, this.options]\r\n                    .filter(x => x != null) as any\r\n            );\r\n        } catch (e) {\r\n            const error = e as any; // AxiosError\r\n            if (error.response)\r\n                return error.response;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    get(path: string = '') {\r\n        return this.request(path, 'get');\r\n    }\r\n\r\n    post(path: string = '', data?: Dictionary) {\r\n        return this.request(path, 'post', data);\r\n    }\r\n\r\n    put(path: string = '', data?: Dictionary) {\r\n        return this.request(path, 'put', data);\r\n    }\r\n\r\n    delete(path: string = '', data?: Dictionary) {\r\n        return this.request(path, 'delete', data);\r\n    }\r\n\r\n    get urlScheme() {\r\n        return this.url.startsWith('https://') ? 'https' : 'http';\r\n    }\r\n}\r\n\r\nexport const Request = {\r\n    get:    (url: string, params?: SessionParams) => new Session(url, params).get(),\r\n    post:   (url: string, params?: SessionParams) => new Session(url, params).post(),\r\n    put:    (url: string, params?: SessionParams) => new Session(url, params).put(),\r\n    delete: (url: string, params?: SessionParams) => new Session(url, params).delete(),\r\n} as const;"]}