{"version":3,"file":"websockets.js","sourceRoot":"je-src/","sources":["advanced/websockets.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,MAAM,OAAO,MAAmD,SAAQ,YAAY;IAGhF,YAAmB,GAAW;QAC1B,KAAK,EAAE,CAAC;QADO,QAAG,GAAH,GAAG,CAAQ;QAF9B,cAAS,GAAqB,IAAI,CAAC;IAInC,CAAC;IAED,OAAO;QACH,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,IAAI,CAAC,IAAiB;;QAClB,MAAA,IAAI,CAAC,SAAS,0CAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,CAAC;IAMD,EAAE,CAAC,KAAa,EAAE,QAAkC;QAChD,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC;IAClC,CAAC;CACJ","sourcesContent":["import { EventEmitter } from \"../eventEmitter.js\";\r\n\r\nexport class Socket<MessageType = Record<string | symbol, any>> extends EventEmitter {\r\n    websocket: WebSocket | null = null;\r\n\r\n    constructor(public url: string) {\r\n        super();\r\n    }\r\n\r\n    connect() {\r\n        this.websocket = new WebSocket(this.url);\r\n        this.websocket.addEventListener('open', () => this.emit('open', this));\r\n        this.websocket.addEventListener('message', data => this.emit('message', data.data));\r\n        this.websocket.addEventListener('close', () => this.emit('close'));\r\n        this.websocket.addEventListener('error', error => this.emit('error', error));\r\n    }\r\n\r\n    talk(data: MessageType) {\r\n        this.websocket?.send(JSON.stringify(data));\r\n    }\r\n\r\n    on(event: 'close', listener: () => any): void;\r\n    on(event: 'error', listener: (error: Error) => any): void;\r\n    on(event: 'open', listener: (socket: Socket<MessageType>) => any): void;\r\n    on(event: 'message', listener: (data: MessageType) => any): void;\r\n    on(event: string, listener: (...args: any[]) => void) {\r\n        super.on(event, listener);\r\n    }\r\n\r\n    get connected() {\r\n        return this.websocket != null;\r\n    }\r\n}"]}