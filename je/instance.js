import { Point, Rect } from "./math.js";
import { getCanvasInstance } from "./canvas.js";
import { toCanvasColor } from "./colors.js";
import { ChildrenArray } from "./childrenArray.js";
let _instanceId = 0;
export class Instance extends ChildrenArray {
    constructor() {
        super();
        this._canvas = null;
        this.firstUpdate = false;
        this.depth = 0;
        this.rotation = 0;
        this.x = 0;
        this.y = 0;
        this.index = ++_instanceId;
        this.onCreate();
    }
    onCreate() { }
    onBegin() { }
    onDestroy() { }
    onUpdate() { }
    onDraw() { }
    _update(ctx) {
        ctx.save();
        this.onUpdate();
        ctx.translate(this.x, this.y);
        if (!this.firstUpdate) {
            this.onBegin();
            this.firstUpdate = true;
        }
        this.onDraw();
        this.children.sort((a, b) => a.depth - b.depth).forEach(child => child._update(ctx));
        ctx.restore();
    }
    setColor(r, g, b, a) {
        this.ctx.fillStyle = toCanvasColor({ r, g, b, a });
    }
    setFontAlign(align) {
        this.ctx.textAlign = align;
    }
    setFontBaseline(baseline) {
        this.ctx.textBaseline = baseline;
    }
    setFont(font) {
        this.ctx.font = font;
    }
    drawRect(x, y, width, height, rounding) {
        this.ctx.save();
        if (!rounding) {
            this.ctx.fillRect(x - width / 2, y - height / 2, width, height);
        }
        else {
            this.ctx.roundRect(x - width / 2, y - height / 2, width, height, rounding);
            this.ctx.fill();
        }
        this.ctx.restore();
    }
    drawText(x, y, ...text) {
        this.ctx.fillText(text.join(' '), x, y);
    }
    drawImage(image, x, y, width, height) {
        this.ctx.drawImage(image, x - width / 2, y - height / 2, width, height);
    }
    setAlpha(value = 1) {
        this.ctx.globalAlpha = value;
    }
    measureText(...text) {
        return this.ctx.measureText(text.join(' '));
    }
    destroy(cleanup = true) {
        if (cleanup)
            this.children.forEach(child => child.destroy());
        this.onDestroy();
        this.canvas.instances.splice(this.canvas.instances.indexOf(this), 1);
    }
    getRect(width, height) {
        const { pos } = this;
        return new Rect(pos.x - width / 2, pos.y - height / 2, width, height);
    }
    isClassOf(...instancesClasses) {
        for (const cls of instancesClasses) {
            if (this instanceof cls)
                return true;
        }
        return false;
    }
    get pos() {
        const parent = this.parent ? this.parent.pos : new Point(0, 0);
        return new Point(this.x + parent.x, this.y + parent.y);
    }
    set pos(p) {
        this.x = p.x;
        this.y = p.y;
    }
    get canvas() {
        if (!this._canvas)
            this._canvas = getCanvasInstance();
        return this._canvas;
    }
    get ctx() {
        return this.canvas.ctx;
    }
}
//# sourceMappingURL=data:application/json;base64,