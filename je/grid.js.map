{"version":3,"file":"grid.js","sourceRoot":"je-src/","sources":["grid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC,MAAM,OAAO,IAAK,SAAQ,QAAQ;IAC9B,YAAmB,WAAW,EAAE,EAAS,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;QACvE,KAAK,EAAE,CAAC;QADO,aAAQ,GAAR,QAAQ,CAAK;QAAS,UAAK,GAAL,KAAK,CAA6B;QAEvE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,MAAM;QACF,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED,QAAQ,CAAC,eAAe,GAAG,IAAI;QAC3B,IAAI,eAAe;YAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACtG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC1C;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACxG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACzC;QACD,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;CACJ","sourcesContent":["import { Color } from \"./colors.js\";\r\nimport { Instance } from \"./instances\";\r\n\r\nexport class Grid extends Instance {\r\n    constructor(public gridSize = 30, public color = Color.create(0, 0, 0, 0.1)) {\r\n        super();\r\n        this.dontTranslate = true;\r\n    }\r\n\r\n    onDraw() {\r\n        this.drawGrid();\r\n    }\r\n\r\n    drawGrid(translateCamera = true) {\r\n        if (translateCamera) this.ctx.translate(-this.canvas.camera.x, -this.canvas.camera.y);\r\n        this.ctx.beginPath();\r\n        for (let x = (this.canvas.width / 2 - this.x) % this.gridSize; x < this.canvas.width; x += this.gridSize) {\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n        }\r\n        for (let y = (this.canvas.height / 2 - this.y) % this.gridSize; y < this.canvas.height; y += this.gridSize) {\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n        }\r\n        this.ctx.closePath();\r\n        this.stroke(this.color);\r\n    }\r\n}"]}