import { Collisions } from "../collisions.js";
import { createColor } from "../colors.js";
import { Instance } from "../instance.js";
import { Mouse } from "../mouse.js";
export class Button extends Instance {
    constructor(x, y, width, height) {
        super();
        this.width = width;
        this.height = height;
        this.hover = false;
        this.hold = false;
        this.color = createColor(255, 255, 255);
        this.text = 'Button';
        this.disabled = false;
        this.x = x;
        this.y = y;
    }
    /**
     * `super.onUpdate()` is required
     */
    onUpdate() {
        if (!this.disabled && Collisions.pointToRect(Mouse.getPosition(), this.rect, true)) {
            if (this.hover != true) {
                this.onOver();
                this.hover = true;
            }
            if (Mouse.isPressed(0)) {
                if (!this.hold) {
                    this.onClick();
                    this.hold = true;
                }
            }
            else {
                if (this.hold) {
                    this.onClickOut();
                    this.hold = false;
                }
            }
        }
        else {
            if (this.hover != false) {
                this.onOut();
                this.hover = false;
            }
            if (this.hold) {
                this.onClickOut();
                this.hold = false;
            }
        }
    }
    onDraw() {
        this.setColor(this.color.r, this.color.g, this.color.b, this.color.a);
        this.drawRect(this.x, this.y, this.width, this.height);
        this.setFont('24px Arial');
        this.setFontAlign('center');
        this.setFontBaseline('middle');
        this.setColor(0, 0, 0);
        this.drawText(this.x, this.y, this.text);
        this.setFontAlign('left');
        this.setFontBaseline('top');
    }
    get rect() {
        return this.getRect(this.width, this.height);
    }
    onOver() { }
    onOut() { }
    onClick() { }
    onClickOut() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6ImplLXNyYy8iLCJzb3VyY2VzIjpbInVpL2J1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxNQUFNLE9BQU8sTUFBTyxTQUFRLFFBQVE7SUFPaEMsWUFBWSxDQUFTLEVBQUUsQ0FBUyxFQUFTLEtBQWEsRUFBUyxNQUFjO1FBQ3pFLEtBQUssRUFBRSxDQUFDO1FBRDZCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTjdFLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDZCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsVUFBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUliLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNoRixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDckI7WUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNaLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztpQkFDcEI7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztpQkFDckI7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFFO2dCQUNyQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDdEI7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQzthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxLQUFJLENBQUM7SUFDWCxLQUFLLEtBQUksQ0FBQztJQUNWLE9BQU8sS0FBSSxDQUFDO0lBQ1osVUFBVSxLQUFJLENBQUM7Q0FDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xsaXNpb25zIH0gZnJvbSBcIi4uL2NvbGxpc2lvbnMuanNcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29sb3IgfSBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XHJcbmltcG9ydCB7IEluc3RhbmNlIH0gZnJvbSBcIi4uL2luc3RhbmNlLmpzXCI7XHJcbmltcG9ydCB7IE1vdXNlIH0gZnJvbSBcIi4uL21vdXNlLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgSW5zdGFuY2Uge1xyXG4gICAgaG92ZXIgPSBmYWxzZTtcclxuICAgIGhvbGQgPSBmYWxzZTtcclxuICAgIGNvbG9yID0gY3JlYXRlQ29sb3IoMjU1LCAyNTUsIDI1NSk7XHJcbiAgICB0ZXh0ID0gJ0J1dHRvbic7XHJcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBwdWJsaWMgd2lkdGg6IG51bWJlciwgcHVibGljIGhlaWdodDogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBgc3VwZXIub25VcGRhdGUoKWAgaXMgcmVxdWlyZWRcclxuICAgICAqL1xyXG4gICAgb25VcGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmIENvbGxpc2lvbnMucG9pbnRUb1JlY3QoTW91c2UuZ2V0UG9zaXRpb24oKSwgdGhpcy5yZWN0LCB0cnVlKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlciAhPSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3ZlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChNb3VzZS5pc1ByZXNzZWQoMCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob2xkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xpY2tPdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyICE9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3V0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrT3V0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvbGQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRyYXcoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb2xvcih0aGlzLmNvbG9yLnIsIHRoaXMuY29sb3IuZywgdGhpcy5jb2xvci5iLCB0aGlzLmNvbG9yLmEpO1xyXG4gICAgICAgIHRoaXMuZHJhd1JlY3QodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnNldEZvbnQoJzI0cHggQXJpYWwnKTtcclxuICAgICAgICB0aGlzLnNldEZvbnRBbGlnbignY2VudGVyJyk7XHJcbiAgICAgICAgdGhpcy5zZXRGb250QmFzZWxpbmUoJ21pZGRsZScpO1xyXG4gICAgICAgIHRoaXMuc2V0Q29sb3IoMCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5kcmF3VGV4dCh0aGlzLngsIHRoaXMueSwgdGhpcy50ZXh0KTtcclxuICAgICAgICB0aGlzLnNldEZvbnRBbGlnbignbGVmdCcpO1xyXG4gICAgICAgIHRoaXMuc2V0Rm9udEJhc2VsaW5lKCd0b3AnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVjdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWN0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk92ZXIoKSB7fVxyXG4gICAgb25PdXQoKSB7fVxyXG4gICAgb25DbGljaygpIHt9XHJcbiAgICBvbkNsaWNrT3V0KCkge31cclxufSJdfQ==