import { Collisions } from "../collisions.js";
import { createColor } from "../colors.js";
import { Instance } from "../instance.js";
import { Mouse } from "../mouse.js";
export class Button extends Instance {
    constructor(x, y, width, height) {
        super();
        this.width = width;
        this.height = height;
        this.hover = false;
        this.hold = false;
        this.color = createColor(255, 255, 255);
        this.text = 'Button';
        this.disabled = false;
        this.x = x;
        this.y = y;
    }
    /**
     * `super.onUpdate()` is required
     */
    onUpdate() {
        if (!this.disabled && Collisions.pointToRect(Mouse.getPosition(), this.rect, true)) {
            if (this.hover != true) {
                this.onOver();
                this.hover = true;
            }
            if (Mouse.isPressed(0)) {
                if (!this.hold) {
                    this.onClick();
                    this.hold = true;
                }
            }
            else {
                if (this.hold) {
                    this.onClickOut();
                    this.hold = false;
                }
            }
        }
        else {
            if (this.hover != false) {
                this.onOut();
                this.hover = false;
            }
            if (this.hold) {
                this.onClickOut();
                this.hold = false;
            }
        }
    }
    onDraw() {
        this.setColor(this.color.r, this.color.g, this.color.b, this.color.a);
        this.fillRect(this.x, this.y, this.width, this.height);
        this.setFont('24px Arial');
        this.setFontAlign('center');
        this.setFontBaseline('middle');
        this.setColor(0, 0, 0);
        this.drawText(this.x, this.y, this.text);
        this.setFontAlign('left');
        this.setFontBaseline('top');
    }
    get rect() {
        return this.getRect(this.width, this.height);
    }
    onOver() { }
    onOut() { }
    onClick() { }
    onClickOut() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6ImplLXNyYy8iLCJzb3VyY2VzIjpbInVpL2J1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxNQUFNLE9BQU8sTUFBTyxTQUFRLFFBQVE7SUFPaEMsWUFBWSxDQUFTLEVBQUUsQ0FBUyxFQUFTLEtBQWEsRUFBUyxNQUFjO1FBQ3pFLEtBQUssRUFBRSxDQUFDO1FBRDZCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTjdFLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDZCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsVUFBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUliLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNoRixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDckI7WUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNaLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztpQkFDcEI7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztpQkFDckI7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFFO2dCQUNyQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDdEI7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQzthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxLQUFJLENBQUM7SUFDWCxLQUFLLEtBQUksQ0FBQztJQUNWLE9BQU8sS0FBSSxDQUFDO0lBQ1osVUFBVSxLQUFJLENBQUM7Q0FDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xsaXNpb25zIH0gZnJvbSBcIi4uL2NvbGxpc2lvbnMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUNvbG9yIH0gZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHsgSW5zdGFuY2UgfSBmcm9tIFwiLi4vaW5zdGFuY2UuanNcIjtcbmltcG9ydCB7IE1vdXNlIH0gZnJvbSBcIi4uL21vdXNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBJbnN0YW5jZSB7XG4gICAgaG92ZXIgPSBmYWxzZTtcbiAgICBob2xkID0gZmFsc2U7XG4gICAgY29sb3IgPSBjcmVhdGVDb2xvcigyNTUsIDI1NSwgMjU1KTtcbiAgICB0ZXh0ID0gJ0J1dHRvbic7XG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBwdWJsaWMgd2lkdGg6IG51bWJlciwgcHVibGljIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYHN1cGVyLm9uVXBkYXRlKClgIGlzIHJlcXVpcmVkXG4gICAgICovXG4gICAgb25VcGRhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiBDb2xsaXNpb25zLnBvaW50VG9SZWN0KE1vdXNlLmdldFBvc2l0aW9uKCksIHRoaXMucmVjdCwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyICE9IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3ZlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoTW91c2UuaXNQcmVzc2VkKDApKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25DbGlja091dCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlciAhPSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25PdXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ob2xkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrT3V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ob2xkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRyYXcoKSB7XG4gICAgICAgIHRoaXMuc2V0Q29sb3IodGhpcy5jb2xvci5yLCB0aGlzLmNvbG9yLmcsIHRoaXMuY29sb3IuYiwgdGhpcy5jb2xvci5hKTtcbiAgICAgICAgdGhpcy5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLnNldEZvbnQoJzI0cHggQXJpYWwnKTtcbiAgICAgICAgdGhpcy5zZXRGb250QWxpZ24oJ2NlbnRlcicpO1xuICAgICAgICB0aGlzLnNldEZvbnRCYXNlbGluZSgnbWlkZGxlJyk7XG4gICAgICAgIHRoaXMuc2V0Q29sb3IoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuZHJhd1RleHQodGhpcy54LCB0aGlzLnksIHRoaXMudGV4dCk7XG4gICAgICAgIHRoaXMuc2V0Rm9udEFsaWduKCdsZWZ0Jyk7XG4gICAgICAgIHRoaXMuc2V0Rm9udEJhc2VsaW5lKCd0b3AnKTtcbiAgICB9XG5cbiAgICBnZXQgcmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVjdCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgb25PdmVyKCkge31cbiAgICBvbk91dCgpIHt9XG4gICAgb25DbGljaygpIHt9XG4gICAgb25DbGlja091dCgpIHt9XG59Il19