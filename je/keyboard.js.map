{"version":3,"file":"keyboard.js","sourceRoot":"je-src/","sources":["keyboard.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAEjD,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9D,gBAAgB,CAAC,OAAO,EAAI,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAI,CAAC,CAAC,CAAC,CAAC;AAE9D,MAAM,QAAQ,GAAG;IACb,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,OAAO;CACjB,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAI,KAAM,SAAQ,YAAY;IAGlD;QACI,KAAK,EAAE,CAAC;QAHZ,SAAI,GAAyB,IAAI,GAAG,EAAE,CAAC;QAInC,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,EAAE,CAAC,OAAO,EAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,IAAY;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,SAAS,CAAC,IAAY;;QAClB,OAAO,MAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,mCAAI,KAAK,CAAC;IACxC,CAAC;IAED,YAAY,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,eAAe,CAAC,GAAW;QACvB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,WAAW,CAAC,GAAW;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,cAAc,CAAC,GAAW;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,SAAS,CAAC,GAAW;QACjB,OAAO,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAED,QAAQ,CAAC,GAAW;QAChB,OAAO,GAAG,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC;IACrC,CAAC;IAED,MAAM;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;YAC/B,IAAI,OAAO,EAAE;gBACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACpB;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAID,EAAE,CAAC,KAAa,EAAE,QAAkC;QAChD,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACJ,CAAA","sourcesContent":["import { EventEmitter } from \"./eventEmitter.js\";\n\naddEventListener('keydown', e => Keyboard.emit('keyDown', e));\naddEventListener('keyup',   e => Keyboard.emit('keyUp',   e));\n\nconst keyTypes = {\n    letter: 'Key',\n    digit: 'Digit'\n};\n\nexport const Keyboard = new class extends EventEmitter {\n    keys: Map<string, boolean> = new Map();\n\n    constructor() {\n        super();\n        this.on('keyDown', e => this.keys.set(e.code, true));\n        this.on('keyUp',   e => this.keys.delete(e.code));\n    }\n\n    isHeld(code: string) {\n        return this.keys.has(code);\n    }\n\n    isPressed(code: string) {\n        return this.keys.get(code) ?? false;\n    }\n\n    isLetterHeld(key: string) {\n        return this.isHeld(this.getLetter(key));\n    }\n\n    isLetterPressed(key: string) {\n        return this.isPressed(this.getLetter(key));\n    }\n\n    isDigitHeld(key: number) {\n        return this.isHeld(this.getDigit(key));\n    }\n\n    isDigitPressed(key: number) {\n        return this.isPressed(this.getDigit(key));\n    }\n\n    getLetter(key: string) {\n        return keyTypes.letter + key.toUpperCase();\n    }\n\n    getDigit(key: number) {\n        return `${keyTypes.digit}${key}`;\n    }\n\n    update() {\n        this.keys.forEach((pressed, key) => {\n            if (pressed) {\n                this.keys.set(key, false);\n                console.log(key);\n            }\n        })\n    }\n\n    on(event: 'keyDown', listener: (key: KeyboardEvent) => void): void;\n    on(event: 'keyUp', listener: (key: KeyboardEvent) => void): void;\n    on(event: string, listener: (...args: any[]) => void): void {\n        super.on(event, listener);\n    }\n}"]}