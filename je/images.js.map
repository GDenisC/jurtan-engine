{"version":3,"file":"images.js","sourceRoot":"je-src/","sources":["images.ts"],"names":[],"mappings":"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","sourcesContent":["import { Instance } from \"./instance.js\";\nimport { Point } from \"./math.js\";\n\nexport const images: HTMLImageElement[] = [];\n\nexport const loadImage = (src: string) => {\n    const image = images.find(i => i.id == src);\n    if (image) return image;\n    const img = new Image();\n    img.src = src;\n    img.id = src;\n    images.push(img);\n    return img;\n}\n\nexport class ImageInstance extends Instance {\n    protected image: HTMLImageElement;\n    private scaleX = 1;\n    private scaleY = 1;\n\n    constructor(imageUrl: string) {\n        super();\n        this.image = loadImage(imageUrl);\n    }\n\n    onDraw(): void {\n        this.drawSelf();\n    }\n\n    drawSelf() {\n        if (!this.image.src)\n            return;\n        this.drawImage(this.image, 0, 0, this.image.width * this.scaleX, this.image.height * this.scaleY);\n    }\n\n    get width() {\n        return this.image.width * this.scaleX;\n    }\n\n    set width(w) {\n        this.scaleX = w / this.width;\n    }\n\n    get height() {\n        return this.image.height * this.scaleY;\n    }\n\n    set height(h) {\n        this.scaleY = h / this.height;\n    }\n\n    get center() {\n        return this.rect.center;\n    }\n\n    set center(p: Point) {\n        this.x = p.x - this.width / 2;\n        this.y = p.y - this.height / 2;\n    }\n\n    get rect() {\n        return this.getRect(this.width, this.height);\n    }\n}\n\n// TODO: fix copy-paste\nexport class Image9Instance extends Instance {\n    protected image: HTMLImageElement;\n    private imageSlices:  [number, number, number, number][];\n    private scaleX = 1;\n    private scaleY = 1;\n\n    constructor(imageUrl: string, public pad: number) {\n        super();\n        this.image = loadImage(imageUrl);\n        this.imageSlices = [];\n        new Promise(resolve => {\n            this.image.addEventListener('load', resolve);\n        }).then(() => {\n            // define the 9 parts as [x, y, w, h]\n            this.imageSlices = [\n                [0,       0      ],\n                [pad,     0      ],\n                [pad * 2, 0      ],\n                [0,       pad    ],\n                [pad,     pad    ],\n                [pad * 2, pad    ],\n                [0,       pad * 2],\n                [pad,     pad * 2],\n                [pad * 2, pad * 2]\n            ].map(x => [x[0], x[1], pad, pad]);\n        })\n    }\n\n    onDraw() {\n        this.drawSelf();\n    }\n\n    drawSelf() {\n        if (!this.image.src)\n            return;\n        const { pad, imageSlices, image, ctx } = this;\n\n        ctx.translate(-this.width / 2, -this.height / 2);\n\n        const size = 0.5;\n\n        let width = this.width + size,\n            height = this.height + size,\n            x = size,\n            y = size;\n\n        ctx.drawImage(image, ...imageSlices[0], x, y, pad, pad);\n        ctx.drawImage(image, ...imageSlices[2], width - pad - x, y, pad, pad)\n        ctx.drawImage(image, ...imageSlices[6], x, height - pad - y, pad, pad)\n        ctx.drawImage(image, ...imageSlices[8], width - pad - x, height - pad - y, pad, pad)\n\n        ctx.drawImage(image, ...imageSlices[1], pad, y, width - 2 * pad, pad)\n        ctx.drawImage(image, ...imageSlices[7], pad, height - pad - y, width - 2 * pad, pad)\n        ctx.drawImage(image, ...imageSlices[3], x, pad, pad, height - 2 * pad)\n        ctx.drawImage(image, ...imageSlices[5], width - pad - x, pad, pad, height - 2 * pad)\n\n        ctx.drawImage(image, ...imageSlices[4], pad, pad, width - 2 * pad, height - 2 * pad)\n    }\n\n    get rect() {\n        return this.getRect(this.width, this.height);\n    }\n\n    get width() {\n        return this.image.width * this.scaleX;\n    }\n\n    set width(w) {\n        this.scaleX = w / this.width;\n    }\n\n    get height() {\n        return this.image.height * this.scaleY;\n    }\n\n    set height(h) {\n        this.scaleY = h / this.height;\n    }\n\n    get center() {\n        return this.rect.center;\n    }\n}"]}