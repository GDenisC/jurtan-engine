{"version":3,"file":"images.js","sourceRoot":"je-src/","sources":["images.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsJE","sourcesContent":["/*\nimport { Instance } from \"./instance.js\";\nimport { Point } from \"./math.js\";\n\nexport const images: HTMLImageElement[] = [];\n\nexport const loadImage = (src: string) => {\n    const image = images.find(i => i.id == src);\n    if (image) return image;\n    const img = new Image();\n    img.src = src;\n    img.id = src;\n    images.push(img);\n    return img;\n}\n\nexport class ImageInstance extends Instance {\n    protected image: HTMLImageElement;\n    private scaleX = 1;\n    private scaleY = 1;\n\n    constructor(imageUrl: string) {\n        super();\n        this.image = loadImage(imageUrl);\n    }\n\n    onDraw(): void {\n        this.drawSelf();\n    }\n\n    drawSelf() {\n        if (!this.image.src)\n            return;\n        this.drawImage(this.image, 0, 0, this.image.width * this.scaleX, this.image.height * this.scaleY);\n    }\n\n    get width() {\n        return this.image.width * this.scaleX;\n    }\n\n    set width(w) {\n        this.scaleX = w / this.width;\n    }\n\n    get height() {\n        return this.image.height * this.scaleY;\n    }\n\n    set height(h) {\n        this.scaleY = h / this.height;\n    }\n\n    get center() {\n        return this.rect.center;\n    }\n\n    set center(p: Point) {\n        this.x = p.x - this.width / 2;\n        this.y = p.y - this.height / 2;\n    }\n\n    get rect() {\n        return this.getRect(this.width, this.height);\n    }\n}\n\n// TODO: fix copy-paste\nexport class Image9Instance extends Instance {\n    protected image: HTMLImageElement;\n    private imageSlices:  [number, number, number, number][];\n    private scaleX = 1;\n    private scaleY = 1;\n\n    constructor(imageUrl: string, public pad: number) {\n        super();\n        this.image = loadImage(imageUrl);\n        this.imageSlices = [];\n        new Promise(resolve => {\n            this.image.addEventListener('load', resolve);\n        }).then(() => {\n            // define the 9 parts as [x, y, w, h]\n            this.imageSlices = [\n                [0,       0      ],\n                [pad,     0      ],\n                [pad * 2, 0      ],\n                [0,       pad    ],\n                [pad,     pad    ],\n                [pad * 2, pad    ],\n                [0,       pad * 2],\n                [pad,     pad * 2],\n                [pad * 2, pad * 2]\n            ].map(x => [x[0], x[1], pad, pad]);\n        })\n    }\n\n    onDraw() {\n        this.drawSelf();\n    }\n\n    drawSelf() {\n        if (!this.image.src)\n            return;\n        const { pad, imageSlices, image, ctx } = this;\n\n        ctx.translate(-this.width / 2, -this.height / 2);\n\n        const size = 0.5;\n\n        let width = this.width + size,\n            height = this.height + size,\n            x = size,\n            y = size;\n\n        ctx.drawImage(image, ...imageSlices[0], x, y, pad, pad);\n        ctx.drawImage(image, ...imageSlices[2], width - pad - x, y, pad, pad)\n        ctx.drawImage(image, ...imageSlices[6], x, height - pad - y, pad, pad)\n        ctx.drawImage(image, ...imageSlices[8], width - pad - x, height - pad - y, pad, pad)\n\n        ctx.drawImage(image, ...imageSlices[1], pad, y, width - 2 * pad, pad)\n        ctx.drawImage(image, ...imageSlices[7], pad, height - pad - y, width - 2 * pad, pad)\n        ctx.drawImage(image, ...imageSlices[3], x, pad, pad, height - 2 * pad)\n        ctx.drawImage(image, ...imageSlices[5], width - pad - x, pad, pad, height - 2 * pad)\n\n        ctx.drawImage(image, ...imageSlices[4], pad, pad, width - 2 * pad, height - 2 * pad)\n    }\n\n    get rect() {\n        return this.getRect(this.width, this.height);\n    }\n\n    get width() {\n        return this.image.width * this.scaleX;\n    }\n\n    set width(w) {\n        this.scaleX = w / this.width;\n    }\n\n    get height() {\n        return this.image.height * this.scaleY;\n    }\n\n    set height(h) {\n        this.scaleY = h / this.height;\n    }\n\n    get center() {\n        return this.rect.center;\n    }\n}\n*/"]}